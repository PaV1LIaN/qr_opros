<?php
require($_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php");

use Bitrix\Main\Loader;
use Bitrix\Main\Application;
use PortalHub\Manager as PH;

global $USER;

$request = Application::getInstance()->getContext()->getRequest();
Loader::includeModule("iblock");

require_once __DIR__ . "/lib/functions.php";

// --- Создание сайта (POST) ---
if (
    $USER->IsAdmin() &&
    $request->isPost() &&
    check_bitrix_sessid() &&
    $request->getPost("create_site") === "Y"
) {
    $siteTitle = trim((string)$request->getPost("site_title"));
    $siteCode  = trim((string)$request->getPost("site_code"));
    $roleName  = trim((string)$request->getPost("role_name"));
    $roleUsers = array_map('intval', (array)$request->getPost("role_users"));

    $result = PH::createPortalSite($siteTitle, $siteCode, $roleName, $roleUsers);

    echo '<div style="margin:10px 0">';
    if (!empty($result["success"])) {
        echo "<pre style='color:green'>" . htmlspecialcharsbx($result["message"]) . "</pre>";
    } else {
        echo "<pre style='color:red'>" . htmlspecialcharsbx($result["message"]) . "</pre>";
    }
    echo '</div>';
}

// --- AJAX: обновление состава роли ---
if (
    $USER->IsAdmin() &&
    $request->isPost() &&
    check_bitrix_sessid() &&
    $request->getPost("AJAX") === "UPDATE_ROLE"
) {
    $roleId    = (int)$request->getPost("ROLE_ID");
    $roleUsers = array_map('intval', (array)$request->getPost("ROLE_USERS"));

    // Текущий состав роли
    $currentUsers = [];
    $by = "id"; $order = "asc";
    $rs = \CUser::GetList($by, $order, ["GROUPS_ID" => [$roleId]], ["FIELDS" => ["ID"]]);
    while ($u = $rs->Fetch()) {
        $currentUsers[] = (int)$u["ID"];
    }

    // Кого добавить / убрать
    $toAdd    = array_diff($roleUsers, $currentUsers);
    $toRemove = array_diff($currentUsers, $roleUsers);

    // Добавляем
    foreach ($toAdd as $uid) {
        $uid = (int)$uid;
        $groups = \CUser::GetUserGroup($uid);
        $groups = array_map('intval', (array)$groups);
        if (!in_array($roleId, $groups, true)) {
            $groups[] = $roleId;
            \CUser::SetUserGroup($uid, $groups);
        }
    }

    // Удаляем
    foreach ($toRemove as $uid) {
        $uid = (int)$uid;
        $groups = \CUser::GetUserGroup($uid);
        $groups = array_map('intval', (array)$groups);
        $groups = array_values(array_diff($groups, [$roleId]));
        \CUser::SetUserGroup($uid, $groups);
    }

    // Список участников для ответа
    $names = [];
    if (!empty($roleUsers)) {
        $filter = ["ID" => implode("|", $roleUsers)];
        $rs = \CUser::GetList($by, $order, $filter, ["FIELDS" => ["ID", "NAME", "LAST_NAME"]]);
        while ($u = $rs->Fetch()) {
            $names[] = trim($u["NAME"] . " " . $u["LAST_NAME"]);
        }
    }

    header('Content-Type: application/json; charset=utf-8');
    echo json_encode([
        "status" => "success",
        "users"  => $names,
    ], JSON_UNESCAPED_UNICODE);
    die();
}

// --- Вывод ---
$userGroups = array_map('intval', (array)$USER->GetUserGroupArray());
$sites = PH::getPortalSites($userGroups);

require __DIR__ . "/templates/form.php";
require __DIR__ . "/templates/list.php";
