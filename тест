index.php 
<?php
// --- –†–∞–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –±–µ–∑ header.php ---
if (isset($_POST['AJAX']) && $_POST['AJAX'] === 'UPDATE_ROLE') {
    require($_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php");
    global $USER;

    if ($USER->IsAdmin() && check_bitrix_sessid() && $_SERVER['REQUEST_METHOD'] === 'POST') {
        $roleId    = (int)($_POST['ROLE_ID'] ?? 0);
        $roleUsers = array_map('intval', (array)($_POST['ROLE_USERS'] ?? []));

        // –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–ª–∏
        $currentUsers = [];
        $by = "id"; $order = "asc";
        $rs = \CUser::GetList($by, $order, ["GROUPS_ID" => [$roleId]], ["FIELDS" => ["ID"]]);
        while ($u = $rs->Fetch()) {
            $currentUsers[] = (int)$u["ID"];
        }

        // –ö–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å / —É–±—Ä–∞—Ç—å
        $toAdd    = array_diff($roleUsers, $currentUsers);
        $toRemove = array_diff($currentUsers, $roleUsers);

        foreach ($toAdd as $uid) {
            $uid = (int)$uid;
            $groups = array_map('intval', (array)\CUser::GetUserGroup($uid));
            if (!in_array($roleId, $groups, true)) {
                $groups[] = $roleId;
                \CUser::SetUserGroup($uid, $groups);
            }
        }

        foreach ($toRemove as $uid) {
            $uid = (int)$uid;
            $groups = array_map('intval', (array)\CUser::GetUserGroup($uid));
            $groups = array_values(array_diff($groups, [$roleId]));
            \CUser::SetUserGroup($uid, $groups);
        }

        // –ò–º–µ–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        $names = [];
        if (!empty($roleUsers)) {
            $ids = implode("|", array_map('intval', $roleUsers));
            $rsU = \CUser::GetList($by, $order, ["ID" => $ids], ["FIELDS" => ["ID","NAME","LAST_NAME","LOGIN"]]);
            while ($u = $rsU->Fetch()) {
                $title = trim($u["NAME"]." ".$u["LAST_NAME"]);
                if ($title === "") { $title = $u["LOGIN"]; }
                $names[] = $title;
            }
        }

        header('Content-Type: application/json; charset=utf-8');
        echo json_encode(["status" => "success", "users" => $names], JSON_UNESCAPED_UNICODE);
        die();
    }

    // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤/—Å–µ—Å—Å–∏–∏
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode(["status" => "error"], JSON_UNESCAPED_UNICODE);
    die();
}

// --- –û–±—ã—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
require($_SERVER["DOCUMENT_ROOT"] . "/bitrix/header.php");

use Bitrix\Main\Loader;
use PortalHub\Manager as PH;

global $USER;

Loader::includeModule("iblock");
require_once __DIR__ . "/lib/functions.php";

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ (POST)
if (
    $USER->IsAdmin() &&
    $_SERVER['REQUEST_METHOD'] === 'POST' &&
    check_bitrix_sessid() &&
    ($_POST["create_site"] ?? "") === "Y"
) {
    $siteTitle = trim((string)($_POST["site_title"] ?? ""));
    $siteCode  = trim((string)($_POST["site_code"] ?? ""));
    $roleName  = trim((string)($_POST["role_name"] ?? ""));

    $roleUsersRaw = trim((string)($_POST["role_users"] ?? ""));
    $roleUsers = $roleUsersRaw !== '' ? array_map('intval', explode(',', $roleUsersRaw)) : [];

    $result = PH::createPortalSite($siteTitle, $siteCode, $roleName, $roleUsers);

    $removeAck = ["create_site","created","warning","error","exists_code"];

    if (!empty($result["success"])) {
        LocalRedirect($APPLICATION->GetCurPageParam("created=" . rawurlencode($siteTitle), $removeAck));
        die();
    } elseif (($result["status"] ?? "") === "exists") {
        $q = "warning=" . rawurlencode($result["message"]);
        if (!empty($result["code"])) {
            $q .= "&exists_code=" . rawurlencode((string)$result["code"]);
        }
        LocalRedirect($APPLICATION->GetCurPageParam($q, $removeAck));
        die();
    } else {
        LocalRedirect($APPLICATION->GetCurPageParam("error=" . rawurlencode($result["message"]), $removeAck));
        die();
    }
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞
$userGroups = array_map('intval', (array)$USER->GetUserGroupArray());
$sites = PH::getPortalSites($userGroups);

// –í—ã–≤–æ–¥ —à–∞–±–ª–æ–Ω–æ–≤
require __DIR__ . "/templates/form.php";
require __DIR__ . "/templates/list.php";

// --- –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—É—Å–ø–µ—Ö, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –æ—à–∏–±–∫–∞) ---
$type = '';
$data = '';
$existsCode = '';

if (!empty($_GET['error'])) {
    $type = 'error';
    $data = $_GET['error'];
} elseif (!empty($_GET['warning'])) {
    $type = 'warning';
    $data = $_GET['warning'];
    $existsCode = $_GET['exists_code'] ?? '';
} elseif (!empty($_GET['created'])) {
    $type = 'success';
    $data = $_GET['created'];
}

if ($type !== ''): ?>
<script>
BX.ready(function() {
    var type = '<?= CUtil::JSEscape($type) ?>';
    var data = '<?= CUtil::JSEscape($data) ?>';
    var existsCode = '<?= CUtil::JSEscape($existsCode) ?>';

    var content = '';
    var opts = { autoHideDelay: 6000, position: 'top-right', category: 'portal_hub' };

    if (type === 'success') {
        content = '‚úÖ –°–∞–π—Ç <b>' + BX.util.htmlspecialchars(data) + '</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!';
    } else if (type === 'warning') {
        content = '‚ö†Ô∏è ' + BX.util.htmlspecialchars(data);
        if (existsCode) {
            var url = '/local/portal_hub/sites/' + existsCode + '/';
            content += '<br><a class="ui-link ui-link-primary" href="'+url+'" target="_blank">–û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∞–π—Ç</a>';
        }
        opts.color = 'warning';
    } else if (type === 'error') {
        content = '‚ùå –û—à–∏–±–∫–∞: <b>' + BX.util.htmlspecialchars(data) + '</b>';
        opts.color = 'danger';
    }

    BX.UI.Notification.Center.notify(Object.assign({ content: content }, opts));

    // –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    try {
        var u = new URL(window.location.href);
        ['created','warning','error','exists_code'].forEach(function(p){ u.searchParams.delete(p); });
        var cleaned = u.pathname + (u.searchParams.toString() ? '?' + u.searchParams.toString() : '') + u.hash;
        window.history.replaceState(null, '', cleaned);
    } catch (e) {}
});
</script>
<?php endif; ?>

<?php
require($_SERVER["DOCUMENT_ROOT"] . "/bitrix/footer.php");


lib/functions.php
<?php
namespace PortalHub;

use Bitrix\Main\Loader;

class Manager
{
    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ —Å –∫–æ–¥–æ–º portal_sites */
    public static function getPortalIblockId(): int
    {
        if (!Loader::includeModule('iblock')) {
            return 0;
        }
        $res = \CIBlock::GetList([], ['=CODE' => 'portal_sites'], false);
        if ($ib = $res->Fetch()) {
            return (int)$ib['ID'];
        }
        return 0;
    }

    /** –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–¥ —Å–∞–π—Ç–∞ –∫ —Å–ª–∞–≥—É */
    public static function sanitizeCode(string $code): string
    {
        $code = mb_strtolower($code);
        $code = preg_replace('~\s+~u', '-', $code);
        $code = preg_replace('~[^a-z0-9\-_]~u', '', $code);
        $code = trim($code, '-_');
        return $code ?: 'site';
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ + —Ä–æ–ª–∏ + —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
     *   ["success"=>true, "id"=>int] |
     *   ["success"=>false, "status"=>"exists", "message"=>string] |
     *   ["success"=>false, "message"=>string]
     */
    public static function createPortalSite(string $siteTitle, string $siteCode, string $roleName, array $roleUsers = []): array
    {
        if (!Loader::includeModule('iblock')) {
            return ["success" => false, "message" => "–ú–æ–¥—É–ª—å –∏–Ω—Ñ–æ–±–ª–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"];
        }

        $IBLOCK_ID = self::getPortalIblockId();
        if ($IBLOCK_ID <= 0) {
            return ["success" => false, "message" => "–ò–Ω—Ñ–æ–±–ª–æ–∫ 'portal_sites' –Ω–µ –Ω–∞–π–¥–µ–Ω"];
        }

        $siteTitle = trim($siteTitle);
        $siteCode  = self::sanitizeCode(trim($siteCode));
        $roleName  = trim($roleName);

        if ($siteTitle === "" || $siteCode === "" || $roleName === "") {
            return ["success" => false, "message" => "–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–¥ —Å–∞–π—Ç–∞ –∏ —Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"];
        }

        // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –ø–æ NAME –∏–ª–∏ CODE
        $exists = \CIBlockElement::GetList(
            [],
            [
                "IBLOCK_ID" => $IBLOCK_ID,
                "ACTIVE"    => "Y",
                [
                    "LOGIC" => "OR",
                    ["=NAME" => $siteTitle],
                    ["=CODE" => $siteCode],
                ],
            ],
            false,
            false,
            ["ID","NAME","CODE"]
        )->Fetch();

        if ($exists) {
            return [
                "success" => false,
                "status"  => "exists",
                "message" => "–°–∞–π—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                "code"    => (string)$exists["CODE"],
                "name"    => (string)$exists["NAME"],
            ];
        }

        // üß± –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É (—Ä–æ–ª—å)
        $group = new \CGroup;
        $roleId = $group->Add([
            "ACTIVE"    => "Y",
            "C_SORT"    => 100,
            "NAME"      => $roleName,
            "STRING_ID" => "portal_role_" . $siteCode,
        ]);
        if (!$roleId) {
            return ["success" => false, "message" => "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —Ä–æ–ª–∏"];
        }

        // üë• –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–æ–ª—å
        $roleUsers = array_unique(array_map('intval', $roleUsers));
        foreach ($roleUsers as $uid) {
            if ($uid <= 0) { continue; }
            $groups = (array)\CUser::GetUserGroup($uid);
            $groups = array_map('intval', $groups);
            if (!in_array((int)$roleId, $groups, true)) {
                $groups[] = (int)$roleId;
                \CUser::SetUserGroup($uid, $groups);
            }
        }

        // üóÇÔ∏è –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –¥–ª—è —Å–∞–π—Ç–∞
        $el = new \CIBlockElement;
        $id = $el->Add([
            "IBLOCK_ID"        => $IBLOCK_ID,
            "ACTIVE"           => "Y",
            "NAME"             => $siteTitle,
            "CODE"             => $siteCode,
            "PROPERTY_VALUES"  => [
                "SITE_ROLE" => (int)$roleId,
            ],
        ]);
        if (!$id) {
            return ["success" => false, "message" => "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–π—Ç–∞: ".$el->LAST_ERROR];
        }

        return ["success" => true, "id" => (int)$id];
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–π—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –≥—Ä—É–ø–ø–∞–º.
     * –£ –∞–¥–º–∏–Ω–æ–≤ ‚Äî –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã.
     */
    public static function getPortalSites(array $userGroups): array
    {
        if (!Loader::includeModule('iblock')) {
            return [];
        }
        $IBLOCK_ID = self::getPortalIblockId();
        if ($IBLOCK_ID <= 0) {
            return [];
        }

        global $USER;
        $isAdmin = (is_object($USER) && $USER->IsAdmin()) || in_array(1, array_map('intval', $userGroups), true);

        $filter = [
            "IBLOCK_ID" => $IBLOCK_ID,
            "ACTIVE"    => "Y",
        ];

        if (!$isAdmin) {
            $ug = array_map('intval', $userGroups);
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç—ã –±–µ–∑ —Ä–æ–ª–∏ (–ø—É–±–ª–∏—á–Ω—ã–µ) –ò–õ–ò —Å —Ä–æ–ª—å—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ª—é–±–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $filter[] = [
                "LOGIC" => "OR",
                ["!PROPERTY_SITE_ROLE" => false, "PROPERTY_SITE_ROLE" => $ug],
                ["PROPERTY_SITE_ROLE" => false],
            ];
        }

        $sites = [];
        $res = \CIBlockElement::GetList(
            ["NAME" => "ASC"],
            $filter,
            false,
            false,
            ["ID", "NAME", "CODE", "PROPERTY_SITE_ROLE"]
        );
        while ($row = $res->GetNext()) {
            $sites[] = $row;
        }
        return $sites;
    }
}


templates/form.php
<?php
if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) die();
global $USER;

use Bitrix\Main\UI\Extension;

if (!$USER->IsAdmin()) return;

// –ó–∞–≥—Ä—É–∂–∞–µ–º Bitrix UI (–∫–Ω–æ–ø–∫–∏/—Ñ–æ—Ä–º—ã/—Å–µ–ª–µ–∫—Ç–æ—Ä)
Extension::load(['ui.entity-selector', 'ui.buttons', 'ui.forms', 'main.core']);
?>

<?php if (isset($_GET["created"])): ?>
    <div class="ui-alert ui-alert-success">
        <span class="ui-alert-message">
            –°–∞–π—Ç <b><?= htmlspecialcharsbx($_GET["created"]) ?></b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.
        </span>
    </div>
<?php endif; ?>

<div class="ui-block ui-block-section" style="padding:16px;">
    <div class="ui-block-title">
        <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—Ç–∞–ª —Å–∞–π—Ç–∞</h3>
    </div>

    <form method="post" action="" class="ui-form">
        <?= bitrix_sessid_post() ?>
        <input type="hidden" name="create_site" value="Y" />

        <div class="ui-form-row">
            <div class="ui-form-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞</div>
            <div class="ui-form-content">
                <input type="text" name="site_title" required class="ui-ctl ui-ctl-textbox">
            </div>
        </div>

        <div class="ui-form-row">
            <div class="ui-form-label">–ö–æ–¥ —Å–∞–π—Ç–∞ (–ø–∞–ø–∫–∞, –ª–∞—Ç–∏–Ω–∏—Ü–∞)</div>
            <div class="ui-form-content">
                <input type="text" name="site_code" class="ui-ctl ui-ctl-textbox" placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º ‚Äî —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏">
            </div>
        </div>

        <div class="ui-form-row">
            <div class="ui-form-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏</div>
            <div class="ui-form-content">
                <input type="text" name="role_name" class="ui-ctl ui-ctl-textbox" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂">
            </div>
        </div>

        <div class="ui-form-row">
            <div class="ui-form-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–æ–ª–∏</div>
            <div class="ui-form-content">
                <input type="hidden" name="role_users" id="role_users_input">
                <div id="user-selector" style="margin-bottom:10px;"></div>
                <button type="button" id="open-selector-btn" class="ui-btn ui-btn-light-border ui-btn-sm">
                    –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                </button>
            </div>
        </div>

        <div class="ui-form-row">
            <button type="submit" class="ui-btn ui-btn-success">–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç</button>
        </div>
    </form>
</div>

<script>
BX.ready(function () {
    var openBtn = document.getElementById('open-selector-btn');
    var container = document.getElementById('user-selector');
    var hiddenInput = document.getElementById('role_users_input');

    if (!openBtn) return;

    var dialog = new BX.UI.EntitySelector.Dialog({
        id: 'portal-hub-user-selector',
        targetNode: openBtn,
        context: 'PORTAL_HUB_USER_SELECT',
        entities: [{ id: 'user' }],
        multiple: true,
        enableSearch: true,
        width: 500,
        dropdownMode: false,
        events: {
            'Item:onSelect': updateView,
            'Item:onDeselect': updateView
        }
    });

    function updateView() {
        var items = dialog.getSelectedItems();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
        hiddenInput.value = items.map(function (i) { return i.id; }).join(',');

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –ª–µ–π–±–ª—ã
        container.innerHTML = '';
        items.forEach(function (i) {
            var el = document.createElement('div');
            el.className = 'ui-label ui-label-light ui-label-fill-light';
            el.style.margin = '4px';
            el.innerHTML = '<span class="ui-label-inner">' + BX.util.htmlspecialchars(i.getTitle()) + '</span>';
            container.appendChild(el);
        });
    }

    openBtn.addEventListener('click', function () {
        if (typeof BX === 'undefined' || !BX.UI || !BX.UI.EntitySelector) {
            alert('UI Entity Selector –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç header.php.');
            return;
        }
        dialog.show();
    });
});
</script>


templates/list.php
<?php
if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) die();
global $USER;

use Bitrix\Main\UI\Extension;

Extension::load(['ui.entity-selector', 'ui.buttons', 'ui.alerts', 'main.core']);
?>

<style>
.portal-card {
    background: #fff;
    border: 1px solid #e3e7ec;
    border-radius: 12px;
    padding: 18px;
    margin-bottom: 16px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.04);
    transition: all 0.2s ease;
}
.portal-card:hover {
    box-shadow: 0 3px 8px rgba(0,0,0,0.08);
    border-color: #dce2eb;
}
.portal-card h4 {
    margin: 0;
    font-size: 17px;
    font-weight: 600;
}
.portal-meta {
    color: #9ea5b4;
    font-size: 13px;
    margin-top: 4px;
}
.portal-users {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-top: 8px;
}
.portal-list-link {
    text-decoration: none;
    color: #0065ff;
    display: block;
    padding: 12px 16px;
    background: #fff;
    border-radius: 8px;
    margin-bottom: 8px;
    transition: background 0.2s;
}
.portal-list-link:hover {
    background: #f5f7fa;
}
</style>

<div style="margin:24px 0;">
    <h3 style="margin:0 0 16px; font-size:20px; font-weight:600;">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã</h3>

    <?php if (empty($sites)): ?>
        <div class="ui-alert ui-alert-warning">
            <span class="ui-alert-message">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.</span>
        </div>
    <?php else: ?>

        <?php if (!$USER->IsAdmin()): ?>
            <!-- ======= –í–ò–î –î–õ–Ø –û–ë–´–ß–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ======= -->
            <?php foreach ($sites as $site): ?>
                <?php
                $siteName = htmlspecialcharsbx($site["NAME"]);
                $siteCode = htmlspecialcharsbx($site["CODE"]);
                ?>
                <a href="/local/portal_hub/sites/<?= $siteCode ?>/" class="portal-list-link">
                    <?= $siteName ?>
                </a>
            <?php endforeach; ?>

        <?php else: ?>
            <!-- ======= –í–ò–î –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ======= -->
            <?php foreach ($sites as $site): ?>
                <?php
                $siteId   = (int)$site["ID"];
                $siteName = htmlspecialcharsbx($site["NAME"]);
                $siteCode = htmlspecialcharsbx($site["CODE"]);
                $roleId   = (int)($site["PROPERTY_SITE_ROLE_VALUE"] ?? 0);

                // –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–ª–∏
                $members = [];
                if ($roleId > 0) {
                    $by = "id"; $order = "asc";
                    $rs = CUser::GetList($by, $order, ["GROUPS_ID" => [$roleId]], ["FIELDS" => ["ID","NAME","LAST_NAME","LOGIN","PERSONAL_PHOTO"]]);
                    while ($u = $rs->Fetch()) {
                        $name = trim($u["NAME"] . " " . $u["LAST_NAME"]);
                        if ($name === "") { $name = $u["LOGIN"]; }

                        // –ú–∏–Ω–∏-–∞–≤–∞—Ç–∞—Ä
                        $photo = "";
                        if (!empty($u["PERSONAL_PHOTO"])) {
                            $file = CFile::ResizeImageGet(
                                $u["PERSONAL_PHOTO"],
                                ["width" => 32, "height" => 32],
                                BX_RESIZE_IMAGE_EXACT,
                                false
                            );
                            if (!empty($file["src"])) {
                                $photo = $file["src"];
                            }
                        }

                        $members[] = [
                            "id" => (int)$u["ID"],
                            "title" => $name,
                            "avatar" => $photo
                        ];
                    }
                }
                ?>
                <div class="portal-card">
                    <h4>
                        <a href="/local/portal_hub/sites/<?= $siteCode ?>/"
                           target="_blank"
                           class="ui-link ui-link-primary">
                           <?= $siteName ?>
                        </a>
                    </h4>
                    <div class="portal-meta">–ü–∞–ø–∫–∞: /local/portal_hub/sites/<?= $siteCode ?>/</div>
                    <?php if ($roleId > 0): ?>
                        <div class="portal-meta">–†–æ–ª—å (ID –≥—Ä—É–ø–ø—ã): <?= $roleId ?></div>
                    <?php else: ?>
                        <div class="portal-meta">–†–æ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ ‚Äî —Å–∞–π—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º</div>
                    <?php endif; ?>

                    <?php if ($roleId > 0): ?>
                        <div class="portal-users" id="user-selector-<?= $roleId ?>"></div>
                        <script>
                        BX.ready(function() {
                            var ctn = document.getElementById('user-selector-<?= $roleId ?>');
                            if (!ctn) return;

                            var users = <?= \Bitrix\Main\Web\Json::encode($members) ?>;

                            users.forEach(function(u) {
                                var el = document.createElement('div');
                                el.className = 'ui-label ui-label-light ui-label-fill-light';
                                el.style.display = 'flex';
                                el.style.alignItems = 'center';
                                el.style.gap = '6px';
                                el.style.margin = '4px';
                                el.innerHTML =
                                    (u.avatar
                                        ? '<img src="' + BX.util.htmlspecialchars(u.avatar) + '" style="width:24px; height:24px; border-radius:50%; object-fit:cover;">'
                                        : '<div style="width:24px; height:24px; border-radius:50%; background:#e1e5eb; display:flex; align-items:center; justify-content:center; font-size:11px; color:#555;">' + (u.title ? u.title.charAt(0).toUpperCase() : '?') + '</div>'
                                    ) +
                                    '<span class="ui-label-inner">' + BX.util.htmlspecialchars(u.title) + '</span>';
                                ctn.appendChild(el);
                            });
                        });
                        </script>

                        <div style="margin-top:10px;">
                            <button type="button"
                                class="ui-btn ui-btn-light-border ui-btn-sm js-edit-role"
                                data-role-id="<?= $roleId ?>"
                                data-users='<?= htmlspecialcharsbx(json_encode($members, JSON_UNESCAPED_UNICODE)) ?>'>
                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            </button>
                            <div id="save-status-<?= $roleId ?>" style="margin-top:8px;"></div>
                        </div>
                    <?php endif; ?>
                </div>
            <?php endforeach; ?>
        <?php endif; ?>

    <?php endif; ?>
</div>

<?php if ($USER->IsAdmin()): ?>
<script>
BX.ready(function () {
    const BX_SESSID = '<?= bitrix_sessid() ?>';

    function renderUsers(container, users) {
        container.innerHTML = '';
        users.forEach(u => {
            const el = document.createElement('div');
            el.className = 'ui-label ui-label-light ui-label-fill-light';
            el.style.display = 'flex';
            el.style.alignItems = 'center';
            el.style.gap = '6px';
            el.innerHTML =
                (u.avatar
                    ? '<img src="' + BX.util.htmlspecialchars(u.avatar) + '" style="width:24px; height:24px; border-radius:50%; object-fit:cover;">'
                    : '<div style="width:24px; height:24px; border-radius:50%; background:#e1e5eb; display:flex; align-items:center; justify-content:center; font-size:11px; color:#555;">' + (u.title ? u.title.charAt(0).toUpperCase() : '?') + '</div>'
                ) +
                '<span class="ui-label-inner">' + BX.util.htmlspecialchars(u.title) + '</span>';
            container.appendChild(el);
        });
    }

    function saveRole(roleId, userIds, onDone) {
        const fd = new FormData();
        fd.append('AJAX', 'UPDATE_ROLE');
        fd.append('sessid', BX_SESSID);
        fd.append('ROLE_ID', roleId);
        userIds.forEach(id => fd.append('ROLE_USERS[]', id));

        fetch(location.href, { method: 'POST', body: fd, credentials: 'same-origin' })
            .then(r => r.json())
            .then(data => onDone && onDone(data))
            .catch(() => onDone && onDone({ status: 'error' }));
    }

    document.querySelectorAll('.js-edit-role').forEach(btn => {
        btn.addEventListener('click', () => {
            const roleId = btn.dataset.roleId;
            const container = document.getElementById('user-selector-' + roleId);
            const saveStatus = document.getElementById('save-status-' + roleId);
            let currentUsers = [];
            try { currentUsers = JSON.parse(btn.dataset.users) || []; } catch(e) {}

            const dialog = new BX.UI.EntitySelector.Dialog({
                id: 'portal-hub-role-' + roleId,
                context: 'PORTAL_HUB_ROLE_EDIT',
                targetNode: btn,
                entities: [{ id: 'user' }],
                multiple: true,
                enableSearch: true,
                width: 500,
                dropdownMode: false,
                selectedItems: currentUsers.map(u => ({ entityId: 'user', id: String(u.id) })),
                events: {
                    'Item:onSelect': updateView,
                    'Item:onDeselect': updateView
                }
            });

            function updateView() {
                const items = dialog.getSelectedItems();
                renderUsers(container, items.map(i => ({
                    id: i.id,
                    title: i.getTitle(),
                    avatar: i.getAvatar()
                })));
            }

            dialog.subscribe('onHide', () => {
                const items = dialog.getSelectedItems();
                const ids = items.map(i => i.id);
                saveStatus.innerHTML = '<div class="ui-alert ui-alert-primary"><span class="ui-alert-message">–°–æ—Ö—Ä–∞–Ω—è–µ–º...</span></div>';
                saveRole(roleId, ids, data => {
                    if (data.status === 'success') {
                        saveStatus.innerHTML = '<div class="ui-alert ui-alert-success"><span class="ui-alert-message">–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</span></div>';
                        btn.dataset.users = JSON.stringify(items.map(i => ({
                            id: i.id,
                            title: i.getTitle(),
                            avatar: i.getAvatar()
                        })));
                        setTimeout(() => saveStatus.innerHTML = '', 2500);
                    } else {
                        saveStatus.innerHTML = '<div class="ui-alert ui-alert-danger"><span class="ui-alert-message">–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.</span></div>';
                    }
                });
            });

            dialog.show();
        });
    });
});
</script>
<?php endif; ?>
