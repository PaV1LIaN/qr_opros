<?php
namespace QrMachine;

use Bitrix\Main\Loader;
use Bitrix\Main\Application;
use Bitrix\Main\Web\Uri;

class EventHandlers
{
    // Константу IBLOCK_ID_MACHINES можно вынести в настройки модуля
    const IBLOCK_ID_MACHINES = 42;

    /**
     * @param array $arFields  Параметры события
     */
    public static function onAfterIBlockElementModify(&$arFields)
    {
        // отработать только при успешном сохранении и нужном инфоблоке
        if (!$arFields["RESULT"] || (int)$arFields["IBLOCK_ID"] !== self::IBLOCK_ID_MACHINES) {
            return;
        }

        // Получаем детальный URL
        $detailUrlTemplate = \CIBlock::GetArrayByID(self::IBLOCK_ID_MACHINES, "DETAIL_PAGE_URL");
        $detailUrl = \CIBlock::ReplaceDetailUrl(
            $detailUrlTemplate,
            ["ELEMENT_ID" => $arFields["ID"], "ELEMENT_CODE" => $arFields["CODE"]]
        );

        // Строим полный URL
        $context = Application::getInstance()->getContext();
        $uri = new Uri($context->getRequest()->getScheme() . '://' . $context->getServer()->getHttpHost() . $detailUrl);
        $fullUrl = $uri->getLocator();

        // Генерируем QR в tmp-файл
        $tmpDir  = $_SERVER["DOCUMENT_ROOT"] . "/upload/qr_tmp/";
        @mkdir($tmpDir, 0755, true);
        $tmpFile = $tmpDir . "qr_{$arFields['ID']}.png";

        include_once __DIR__ . "/phpqrcode.php";
        \QRcode::png($fullUrl, $tmpFile, QR_ECLEVEL_L, 4, 2);

        // Сохраняем в свойство-файл QR_CODE
        $fileArray = \CFile::MakeFileArray($tmpFile);
        $fileArray["MODULE_ID"] = "iblock";
        \CIBlockElement::SetPropertyValuesEx(
            $arFields["ID"],
            self::IBLOCK_ID_MACHINES,
            ["QR_CODE" => $fileArray]
        );

        @unlink($tmpFile);
    }
}








