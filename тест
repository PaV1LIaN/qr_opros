<?php
/**
 * Local\Siteforge\SiteFactory
 * Инкапсулирует:
 *  - создание файловой папки сайта;
 *  - регистрацию сайта в b_site;
 *  - создание групп (Admins/Users) и назначение выбранных пользователей;
 *  - назначение файловых прав на директорию сайта;
 *  - выборку списка всех подсайтов проекта;
 *  - проверку доступа пользователя к подсайту.
 */

namespace Local\Siteforge;

use Bitrix\Main\Application;
use Bitrix\Main\IO\Directory;
use Bitrix\Main\Loader;
use Bitrix\Main\ArgumentException;
use Bitrix\Main\SystemException;
use Bitrix\Main\Context;

class SiteFactory
{
    /** Корень, где живут создаваемые сайты нашего проекта */
    protected string $rootRel = '/local/siteforge';
    protected string $rootAbs;

    public function __construct()
    {
        $this->rootAbs = Application::getDocumentRoot() . $this->rootRel;
    }

    /**
     * Создание сайта: папка + index.php + запись в b_site (+ региональные настройки).
     * @param array{SITE_NAME:string,FOLDER_NAME:string} $params
     * @return array{SITE_LID:string,FOLDER_ABS:string,FOLDER_REL:string}
     */
    public function createSite(array $params): array
    {
        Loader::includeModule('main');

        $siteName   = trim((string)($params['SITE_NAME'] ?? ''));
        $folderName = trim((string)($params['FOLDER_NAME'] ?? ''));

        // Минимальная валидация входных данных
        if ($siteName === '') {
            throw new ArgumentException('SITE_NAME required');
        }
        if ($folderName === '' || !preg_match('~^[a-z0-9\-\_]+$~i', $folderName)) {
            throw new ArgumentException('FOLDER_NAME invalid (allowed: a-z, 0-9, -, _)');
        }

        // Абсолютные/относительные пути для новой директории сайта
        $siteFolderAbs = $this->rootAbs . '/' . $folderName;
        $siteFolderRel = $this->rootRel . '/' . $folderName . '/'; // важно: закрывающий слэш

        // Обеспечиваем наличие корня проекта
        if (!Directory::isDirectoryExists($this->rootAbs)) {
            Directory::createDirectory($this->rootAbs);
        }

        // Создаём директорию сайта (если уже есть — ошибка)
        if (Directory::isDirectoryExists($siteFolderAbs)) {
            throw new SystemException('Folder already exists: ' . $siteFolderAbs);
        }
        Directory::createDirectory($siteFolderAbs);

        // Простейший index.php в новой папке, чтобы сайт открывался
        $indexPhp = $siteFolderAbs . '/index.php';
        $indexContent = <<<'PHP'
<?php
require $_SERVER['DOCUMENT_ROOT'].'/bitrix/header.php';
$APPLICATION->SetTitle('Новый сайт');
?>
<h1>Добро пожаловать!</h1>
<p>Это стартовая страница нового сайта, созданного через SiteForge.</p>
<?php
require $_SERVER['DOCUMENT_ROOT'].'/bitrix/footer.php';
PHP;
        file_put_contents($indexPhp, $indexContent);

        // Генерируем LID (2 символа — максимально совместимо с Битрикс)
        $LID = strtoupper(substr(md5($folderName.microtime(true)), 0, 2));
        if (\CSite::GetByID($LID)->Fetch()) {
            // На случай крайне редкой коллизии — пробуем ещё раз
            $LID = strtoupper(substr(md5($folderName.microtime(true).random_int(1, 9999)), 0, 2));
        }

        // ---- РЕГИОНАЛЬНЫЕ НАСТРОЙКИ И SERVER_NAME (исправление ошибки) ----
        // Наследуем культуру и server_name с дефолтного сайта,
        // чтобы CSite::CheckFields не ругался "Не указаны региональные настройки".
        $defaultSite = \CSite::GetList($by = 'sort', $order = 'asc', ['DEF' => 'Y'])->Fetch();

        // SERVER_NAME: сначала из опции, если пусто — берём текущий хост
        $serverName = (string)\COption::GetOptionString('main', 'server_name', '');
        if ($serverName === '') {
            $serverName = (string)Context::getCurrent()->getServer()->getHttpHost();
        }

        // Для новых версий (b_culture): достаточно CULTURE_ID.
        $cultureId = 0;
        if (!empty($defaultSite['CULTURE_ID'])) {
            $cultureId = (int)$defaultSite['CULTURE_ID'];
        }

        // Фолбэк для старых установок, где CULTURE_ID может отсутствовать:
        $formatDate     = $defaultSite['FORMAT_DATE']     ?? 'DD.MM.YYYY';
        $formatDateTime = $defaultSite['FORMAT_DATETIME'] ?? 'DD.MM.YYYY HH:MI:SS';
        $charset        = $defaultSite['CHARSET']         ?? 'UTF-8';
        // --------------------------------------------------------------------

        // Формируем поля для добавления сайта
        $fields = [
            'LID'         => $LID,
            'SORT'        => 100,
            'ACTIVE'      => 'Y',
            'DEF'         => 'N',
            'NAME'        => $siteName,
            'DIR'         => $siteFolderRel, // обязательно с / на конце
            'DOMAIN'      => '',             // при необходимости можно задать домен
            'LANGUAGE_ID' => 'ru',
            'SITE_NAME'   => $siteName,
            'SERVER_NAME' => $serverName,    // важно для корректной валидации
        ];

        if ($cultureId > 0) {
            // Новый способ: передаём CULTURE_ID
            $fields['CULTURE_ID'] = $cultureId;
        } else {
            // Старый способ: явные региональные поля
            $fields['FORMAT_DATE']     = $formatDate;
            $fields['FORMAT_DATETIME'] = $formatDateTime;
            $fields['CHARSET']         = $charset;
        }

        // Регистрируем сайт
        $cs = new \CSite;
        $ok = $cs->Add($fields);

        if (!$ok) {
            // Откат: если сайт не создался — удаляем директорию
            Directory::deleteDirectory($siteFolderAbs);
            global $APPLICATION;
            $ex  = $APPLICATION->GetException();
            $msg = $ex ? $ex->GetString() : 'Unknown error';
            throw new SystemException('CSite::Add failed: ' . $msg);
        }

        return [
            'SITE_LID'   => $LID,
            'FOLDER_ABS' => $siteFolderAbs,
            'FOLDER_REL' => $siteFolderRel,
        ];
    }

    /**
     * Создаёт 2 группы под сайт и назначает пользователей.
     * @param array{SITE_CODE:string,ADMINS:array,USERS:array} $params
     * @return array{ADMIN_GROUP_ID:int,USER_GROUP_ID:int}
     */
    public function createGroupsAndAssignUsers(array $params): array
    {
        Loader::includeModule('main');

        $siteCode = (string)($params['SITE_CODE'] ?? '');
        $admins   = array_unique(array_map('intval', (array)($params['ADMINS'] ?? [])));
        $users    = array_unique(array_map('intval', (array)($params['USERS'] ?? [])));

        if ($siteCode === '') {
            throw new ArgumentException('SITE_CODE required');
        }

        $adminGroupName = "[{$siteCode}] Site Admins";
        $userGroupName  = "[{$siteCode}] Site Users";

        $adminGroupId = $this->getOrCreateGroup($adminGroupName, 'Администраторы сайта '.$siteCode);
        $userGroupId  = $this->getOrCreateGroup($userGroupName,  'Пользователи сайта '.$siteCode);

        // Не допускаем дублей в членстве
        $this->assignUsersToGroup($adminGroupId, $admins);
        $this->assignUsersToGroup($userGroupId,  $users);

        return [
            'ADMIN_GROUP_ID' => $adminGroupId,
            'USER_GROUP_ID'  => $userGroupId,
        ];
    }

    /**
     * Файловые права на директорию сайта: Admins=W, Users=R, * = D.
     * @param array{FOLDER_ABS:string,ADMIN_GROUP_ID:int,USER_GROUP_ID:int} $params
     */
    public function applyFsPermissions(array $params): void
    {
        $folderAbs = (string)($params['FOLDER_ABS'] ?? '');
        $adminGid  = (int)($params['ADMIN_GROUP_ID'] ?? 0);
        $userGid   = (int)($params['USER_GROUP_ID'] ?? 0);

        if ($folderAbs === '' || !is_dir($folderAbs)) {
            throw new ArgumentException('FOLDER_ABS invalid');
        }
        if ($adminGid <= 0 || $userGid <= 0) {
            throw new ArgumentException('Group IDs required');
        }

        $docRoot   = Application::getDocumentRoot();
        $folderRel = str_replace($docRoot, '', $folderAbs);
        if ($folderRel === $folderAbs) {
            throw new SystemException('Cannot compute relative path');
        }

        $perm = [
            'G'.$adminGid => 'W',
            'G'.$userGid  => 'R',
            '*'           => 'D',
        ];
        \CMain::SetFileAccessPermission($folderRel, $perm);
    }

    /**
     * Список активных сайтов, созданных нашим проектом (DIR начинается с /local/siteforge/).
     * @return array<int,array{LID:string,NAME:string,DIR:string}>
     */
    public function listSites(): array
    {
        $out = [];
        $res = \CSite::GetList($by='NAME', $order='asc', ['ACTIVE' => 'Y']);
        while ($s = $res->Fetch()) {
            $dir = (string)($s['DIR'] ?? '');
            if ($this->startsWith($dir, $this->rootRel . '/')) {
                $out[] = [
                    'LID'  => (string)$s['LID'],
                    'NAME' => (string)$s['NAME'],
                    'DIR'  => $dir,
                ];
            }
        }
        return $out;
    }

    /**
     * Проверка: состоит ли пользователь (userId) в одной из групп сайта (Admins/Users).
     * true => доступ есть
     */
    public function userHasAccessToSite(string $lid, int $userId): bool
    {
        if ($userId <= 0) { return false; }
        $ids = $this->resolveSiteGroupIdsByLid($lid);
        $userGroups = \CUser::GetUserGroup($userId);
        if (!is_array($userGroups)) { $userGroups = []; }
        $userGroups = array_map('intval', $userGroups);

        foreach (['ADMIN_GROUP_ID','USER_GROUP_ID'] as $k) {
            if (!empty($ids[$k]) && in_array((int)$ids[$k], $userGroups, true)) {
                return true;
            }
        }
        return false;
    }

    /** ================= Helpers ================= */

    protected function getOrCreateGroup(string $name, string $description): int
    {
        $stringId = $this->slugifyStringId($name);

        // Сначала ищем по STRING_ID
        $g = \CGroup::GetList($by='c_sort', $order='asc', ['STRING_ID' => $stringId])->Fetch();
        if ($g && (int)$g['ID'] > 0) {
            return (int)$g['ID'];
        }
        // Потом — по NAME
        $g = \CGroup::GetList($by='c_sort', $order='asc', ['NAME' => $name])->Fetch();
        if ($g && (int)$g['ID'] > 0) {
            return (int)$g['ID'];
        }

        $gr = new \CGroup;
        $id = $gr->Add([
            'ACTIVE'      => 'Y',
            'C_SORT'      => 100,
            'NAME'        => $name,
            'DESCRIPTION' => $description,
            'STRING_ID'   => $stringId,
        ]);
        if (!$id) {
            global $APPLICATION;
            $ex = $APPLICATION->GetException();
            $msg = $ex ? $ex->GetString() : 'Unknown error';
            throw new SystemException('Group create failed: ' . $msg);
        }
        return (int)$id;
    }

    protected function assignUsersToGroup(int $groupId, array $userIds): void
    {
        if ($groupId <= 0 || empty($userIds)) { return; }

        // Узнаём текущих участников, чтобы не дублировать
        $existing = [];
        $rs = \CUser::GetList($by='ID', $order='asc', ['GROUPS_ID' => [$groupId]], ['FIELDS'=>['ID']]);
        while ($u = $rs->Fetch()) {
            $existing[(int)$u['ID']] = true;
        }

        foreach ($userIds as $uid) {
            $uid = (int)$uid;
            if ($uid <= 0 || isset($existing[$uid])) { continue; }
            \CUser::AppendUserGroup($uid, $groupId);
        }
    }

    protected function resolveSiteGroupIdsByLid(string $lid): array
    {
        $adminName = "[{$lid}] Site Admins";
        $userName  = "[{$lid}] Site Users";
        return [
            'ADMIN_GROUP_ID' => $this->findGroupIdByNameOrStringId($adminName),
            'USER_GROUP_ID'  => $this->findGroupIdByNameOrStringId($userName),
        ];
    }

    protected function findGroupIdByNameOrStringId(string $name): ?int
    {
        $stringId = $this->slugifyStringId($name);

        $g = \CGroup::GetList($by='c_sort', $order='asc', ['STRING_ID' => $stringId])->Fetch();
        if ($g && (int)$g['ID'] > 0) {
            return (int)$g['ID'];
        }
        $g = \CGroup::GetList($by='c_sort', $order='asc', ['NAME' => $name])->Fetch();
        if ($g && (int)$g['ID'] > 0) {
            return (int)$g['ID'];
        }
        return null;
    }

    protected function slugifyStringId(string $name): string
    {
        // STRING_ID — латиница/цифры/подчеркивание
        $id = mb_strtolower($name);
        $id = preg_replace('~[^a-z0-9\_]+~', '_', $id);
        $id = trim($id, '_');
        if ($id === '') { $id = 'site_group_'.substr(md5($name), 0, 6); }
        return substr($id, 0, 50);
    }

    /** Компактный аналог PHP8 str_starts_with */
    protected function startsWith(string $haystack, string $needle): bool
    {
        return $needle === '' || strncmp($haystack, $needle, strlen($needle)) === 0;
    }
}
